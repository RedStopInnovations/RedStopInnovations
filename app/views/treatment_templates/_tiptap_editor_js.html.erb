<script type="module">
    import { Editor } from 'https://esm.sh/@tiptap/core'
    import StarterKit from 'https://esm.sh/@tiptap/starter-kit'
    import { TextAlign } from 'https://esm.sh/@tiptap/extension-text-align'
    import { Underline } from 'https://esm.sh/@tiptap/extension-underline'
    import { TextStyle } from 'https://esm.sh/@tiptap/extension-text-style'
    import { FontFamily } from 'https://esm.sh/@tiptap/extension-font-family'
    import { Color } from 'https://esm.sh/@tiptap/extension-color'
    import { Highlight } from 'https://esm.sh/@tiptap/extension-highlight'
    import { Image } from 'https://esm.sh/@tiptap/extension-image'
    import { Table } from 'https://esm.sh/@tiptap/extension-table'
    import { TableRow } from 'https://esm.sh/@tiptap/extension-table-row'
    import { TableHeader } from 'https://esm.sh/@tiptap/extension-table-header'
    import { TableCell } from 'https://esm.sh/@tiptap/extension-table-cell'
    import { TaskList } from 'https://esm.sh/@tiptap/extension-task-list'
    import { TaskItem } from 'https://esm.sh/@tiptap/extension-task-item'
    import { Link } from 'https://esm.sh/@tiptap/extension-link'
    import { DragHandle } from 'https://esm.sh/@tiptap/extension-drag-handle'

    // Custom FontSize extension using textStyle
    const FontSize = TextStyle.extend({
        addAttributes() {
            return {
                fontSize: {
                    default: null,
                    parseHTML: element => element.style.fontSize.replace(/['"]+/g, ''),
                    renderHTML: attributes => {
                        if (!attributes.fontSize) {
                            return {}
                        }
                        return {
                            style: `font-size: ${attributes.fontSize}`,
                        }
                    },
                },
            }
        },

        addCommands() {
            return {
                setFontSize: fontSize => ({ chain }) => {
                    return chain()
                        .setMark('textStyle', { fontSize })
                        .run()
                },
                unsetFontSize: () => ({ chain }) => {
                    return chain()
                        .setMark('textStyle', { fontSize: null })
                        .run()
                },
            }
        },
    })

    // Get existing content for editing
    const hiddenInput = document.getElementById('js-hidden-input-content');
    const htmlHiddenInput = document.getElementById('js-hidden-input-html-content');
    const existingContent = hiddenInput ? hiddenInput.value : '';

    let initialContent;
    if (existingContent) {
        try {
            // Try to parse as JSON (for stored node content)
            initialContent = JSON.parse(existingContent);

            // Filter out unsupported node types
            if (initialContent && initialContent.content && Array.isArray(initialContent.content)) {
                const unsupportedTypes = ['image', 'signature', 'bodyChart', 'yesNo'];
                initialContent.content = initialContent.content.filter(node => {
                    return !unsupportedTypes.includes(node.type);
                });
            }

        } catch (e) {
            // Fallback to HTML string if not JSON
            initialContent = existingContent;
        }
    } else {
        initialContent = '<p>Start typing your note ...</p>';
    }

    // Initialize the editor
    const editor = new Editor({
        element: document.querySelector('#js-tiptap-editor-main'),
        extensions: [
            StarterKit.configure({
                // Disable Link from StarterKit to use our custom configuration
                link: false,
            }),
            TextAlign.configure({
                types: ['heading', 'paragraph'],
            }),
            Underline,
            FontSize,
            FontFamily.configure({
                types: ['textStyle'],
            }),
            Color.configure({
                types: ['textStyle'],
            }),
            Highlight.configure({
                multicolor: true,
            }),
            Image.configure({
                inline: true,
                allowBase64: true,
            }),
            Table.configure({
                resizable: true,
            }),
            TableRow,
            TableHeader,
            TableCell,
            TaskList,
            TaskItem.configure({
                nested: true,
            }),
            Link.configure({
                openOnClick: false,
            }),
            DragHandle.configure({
                render: () => {
                  const element = document.createElement('div')

                  // Use as a hook for CSS to insert an icon
                  element.classList.add('js-drag-handle', 'glyphicon', 'glyphicon-option-vertical')

                  return element
                },
                tippyOptions: {
                  placement: 'left',
                }
            }),
        ],
        content: initialContent,
        onUpdate: ({ editor }) => {
            if (hiddenInput) {
                // Store as JSON nodes instead of HTML
                hiddenInput.value = JSON.stringify(editor.getJSON());
            }
            if (htmlHiddenInput) {
                // Store as HTML for easy display/export
                htmlHiddenInput.value = editor.getHTML();
            }
        }
    });

    const toolbar = document.getElementById('js-tiptap-editor-toolbar');

    // Helper functions
    function createButton(config) {
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.innerHTML = config.icon;
        btn.title = config.title;
        btn.addEventListener('click', config.action);

        if (config.isActive) {
            const updateState = () => {
                btn.classList.toggle('is-active', config.isActive());
            };
            editor.on('selectionUpdate', updateState);
            editor.on('transaction', updateState);
            updateState();
        }

        return btn;
    }

    function createSelect(config) {
        // Create Bootstrap dropdown
        const dropdown = document.createElement('div');
        dropdown.className = 'toolbar-dropdown dropdown';

        const button = document.createElement('button');
        button.className = 'btn btn-default dropdown-toggle';
        button.type = 'button';
        button.setAttribute('data-toggle', 'dropdown');
        button.setAttribute('aria-haspopup', 'true');
        button.setAttribute('aria-expanded', 'false');
        button.title = config.title;

        const buttonContent = document.createElement('span');
        if (config.icon) {
            buttonContent.innerHTML = config.icon;
        } else {
            buttonContent.textContent = config.options[0].label;
        }

        const caret = document.createElement('span');
        caret.className = 'caret';

        button.appendChild(buttonContent);
        button.appendChild(caret);

        const menu = document.createElement('ul');
        menu.className = 'dropdown-menu';
        menu.setAttribute('role', 'menu');

        config.options.forEach(option => {
            const li = document.createElement('li');
            li.setAttribute('role', 'presentation');

            const a = document.createElement('a');
            a.setAttribute('role', 'menuitem');
            a.setAttribute('tabindex', '-1');
            a.href = '#';
            a.textContent = option.label;
            a.setAttribute('data-value', option.value);

            a.addEventListener('click', (e) => {
                e.preventDefault();
                config.onChange(option.value);

                if (!config.icon) {
                    buttonContent.textContent = option.label;
                }

                // Update active state
                menu.querySelectorAll('li').forEach(item => item.classList.remove('active'));
                li.classList.add('active');
            });

            li.appendChild(a);
            menu.appendChild(li);
        });

        dropdown.appendChild(button);
        dropdown.appendChild(menu);

        if (config.getCurrentValue) {
            const updateValue = () => {
                const currentValue = config.getCurrentValue();
                const currentOption = config.options.find(opt => opt.value === currentValue) || config.options[0];

                if (!config.icon) {
                    buttonContent.textContent = currentOption.label;
                }

                // Update active state
                menu.querySelectorAll('li').forEach((li, index) => {
                    li.classList.toggle('active', config.options[index].value === currentValue);
                });
            };
            editor.on('selectionUpdate', updateValue);
            editor.on('transaction', updateValue);
            updateValue();
        }

        return dropdown;
    }    function createColorPicker(config) {
        const wrapper = document.createElement('div');
        wrapper.className = 'color-picker';
        wrapper.title = config.title;

        const button = document.createElement('button');
        button.type = 'button';
        button.innerHTML = config.icon;

        const popup = document.createElement('div');
        popup.className = 'color-picker-popup';

        const title = document.createElement('div');
        title.className = 'color-picker-title';
        title.textContent = config.title;

        const swatches = document.createElement('div');
        swatches.className = 'color-swatches';

        // Popular colors for the swatches
        const colors = [
            '#000000', '#333333', '#666666', '#999999', '#cccccc', '#ffffff',
            '#ff0000', '#ff6600', '#ffcc00', '#33cc33', '#0066cc', '#6633cc',
            '#ff3366', '#ff9933', '#ffff00', '#66ff66', '#3399ff', '#9966ff',
            '#cc0000', '#cc6600', '#cccc00', '#00cc00', '#0000cc', '#6600cc',
            '#990000', '#993300', '#999900', '#009900', '#000099', '#330099',
            '#660000', '#663300', '#666600', '#006600', '#000066', '#330066'
        ];

        colors.forEach(color => {
            const swatch = document.createElement('div');
            swatch.className = 'color-swatch';
            swatch.style.backgroundColor = color;
            swatch.title = color;
            swatch.addEventListener('click', () => {
                config.onChange(color);
                popup.classList.remove('show');
            });
            swatches.appendChild(swatch);
        });

        const resetButton = document.createElement('button');
        resetButton.className = 'color-picker-reset';
        resetButton.type = 'button';
        resetButton.innerHTML = '<i class="fa fa-eraser"></i>';
        resetButton.title = config.resetText || 'Remove Color';
        resetButton.addEventListener('click', () => {
            config.onReset();
            popup.classList.remove('show');
        });

        popup.appendChild(title);
        popup.appendChild(swatches);
        popup.appendChild(resetButton);

        button.addEventListener('click', (e) => {
            e.stopPropagation();
            // Close all other popups
            document.querySelectorAll('.color-picker-popup.show').forEach(p => {
                if (p !== popup) p.classList.remove('show');
            });
            // Toggle this popup
            popup.classList.toggle('show');
        });

        // Close popup when clicking outside
        document.addEventListener('click', (e) => {
            if (!wrapper.contains(e.target)) {
                popup.classList.remove('show');
            }
        });

        wrapper.appendChild(button);
        wrapper.appendChild(popup);
        return wrapper;
    }

    function createSeparator() {
        const separator = document.createElement('div');
        separator.className = 'toolbar-separator';
        return separator;
    }

    function createGroup(items) {
        const group = document.createElement('div');
        group.className = 'toolbar-group';
        items.forEach(item => group.appendChild(item));
        return group;
    }

    // Group 1: Undo/Redo
    const undoBtn = createButton({
        icon: '<i class="fa fa-undo"></i>',
        title: 'Undo',
        action: () => editor.chain().focus().undo().run()
    });

    const redoBtn = createButton({
        icon: '<i class="fa fa-repeat"></i>',
        title: 'Redo',
        action: () => editor.chain().focus().redo().run()
    });

    // Group 2: Font Family
    const fontFamilySelect = createSelect({
        title: 'Font Family',
        icon: '<i class="fa fa-font"></i>',
        options: [
            { value: 'Arial', label: 'Arial' },
            { value: 'Courier New', label: 'Courier New' },
            { value: 'Georgia', label: 'Georgia' },
            { value: 'Times New Roman', label: 'Times New Roman' }
        ],
        onChange: (value) => {
            if (value === 'Arial') {
                editor.chain().focus().unsetFontFamily().run();
            } else {
                editor.chain().focus().setFontFamily(value).run();
            }
        },
        getCurrentValue: () => {
            const fontFamily = editor.getAttributes('textStyle').fontFamily;
            return fontFamily || 'Arial';
        }
    });

    // Group 3: Font Size
    const fontSizeSelect = createSelect({
        title: 'Font Size',
        icon: '<i class="fa fa-text-height"></i>',
        options: [
            { value: '10px', label: '10' },
            { value: '12px', label: '12' },
            { value: '14px', label: '14' },
            { value: '16px', label: '16' },
            { value: '18px', label: '18' },
            { value: '20px', label: '20' },
            { value: '22px', label: '22' },
            { value: '24px', label: '24' },
            { value: '36px', label: '36' },
            { value: '72px', label: '72' }
        ],
        onChange: (value) => {
            editor.chain().focus().setFontSize(value).run();
        },
        getCurrentValue: () => {
            const fontSize = editor.getAttributes('textStyle').fontSize;
            return fontSize || '14px';
        }
    });

    // Group 4: Headings
    const headingSelect = createSelect({
        title: 'Heading Style',
        icon: '<i class="fa fa-header"></i>',
        options: [
            { value: 'paragraph', label: 'Paragraph' },
            { value: '1', label: 'Heading 1' },
            { value: '2', label: 'Heading 2' },
            { value: '3', label: 'Heading 3' },
            { value: '4', label: 'Heading 4' }
        ],
        onChange: (value) => {
            if (value === 'paragraph') {
                editor.chain().focus().setParagraph().run();
            } else {
                editor.chain().focus().toggleHeading({ level: parseInt(value) }).run();
            }
        },
        getCurrentValue: () => {
            if (editor.isActive('heading', { level: 1 })) return '1';
            if (editor.isActive('heading', { level: 2 })) return '2';
            if (editor.isActive('heading', { level: 3 })) return '3';
            if (editor.isActive('heading', { level: 4 })) return '4';
            return 'paragraph';
        }
    });

    // Group 5: Lists
    const listSelect = createSelect({
        title: 'List Type',
        icon: '<i class="fa fa-list"></i>',
        options: [
            { value: 'none', label: 'No List' },
            { value: 'bullet', label: 'Bullet List' },
            { value: 'ordered', label: 'Numbered List' },
            { value: 'task', label: 'Task List' }
        ],
        onChange: (value) => {
            switch(value) {
                case 'bullet':
                    editor.chain().focus().toggleBulletList().run();
                    break;
                case 'ordered':
                    editor.chain().focus().toggleOrderedList().run();
                    break;
                case 'task':
                    editor.chain().focus().toggleTaskList().run();
                    break;
                default:
                    editor.chain().focus().liftListItem('listItem').run();
            }
        },
        getCurrentValue: () => {
            if (editor.isActive('bulletList')) return 'bullet';
            if (editor.isActive('orderedList')) return 'ordered';
            if (editor.isActive('taskList')) return 'task';
            return 'none';
        }
    });

    // Group 6: Formatting
    const blockquoteBtn = createButton({
        icon: '<i class="fa fa-quote-left"></i>',
        title: 'Blockquote',
        action: () => editor.chain().focus().toggleBlockquote().run(),
        isActive: () => editor.isActive('blockquote')
    });

    const boldBtn = createButton({
        icon: '<i class="fa fa-bold"></i>',
        title: 'Bold',
        action: () => editor.chain().focus().toggleBold().run(),
        isActive: () => editor.isActive('bold')
    });

    const italicBtn = createButton({
        icon: '<i class="fa fa-italic"></i>',
        title: 'Italic',
        action: () => editor.chain().focus().toggleItalic().run(),
        isActive: () => editor.isActive('italic')
    });

    const underlineBtn = createButton({
        icon: '<i class="fa fa-underline"></i>',
        title: 'Underline',
        action: () => editor.chain().focus().toggleUnderline().run(),
        isActive: () => editor.isActive('underline')
    });

    const strikeBtn = createButton({
        icon: '<i class="fa fa-strikethrough"></i>',
        title: 'Strikethrough',
        action: () => editor.chain().focus().toggleStrike().run(),
        isActive: () => editor.isActive('strike')
    });

    const linkBtn = createButton({
        icon: '<i class="fa fa-link"></i>',
        title: 'Link',
        action: () => {
            const url = window.prompt('Enter URL:');
            if (url) {
                editor.chain().focus().setLink({ href: url }).run();
            }
        },
        isActive: () => editor.isActive('link')
    });

    const clearFormatBtn = createButton({
        icon: '<i class="fa fa-eraser"></i>',
        title: 'Clear Formatting',
        action: () => {
            editor.chain().focus()
                .unsetBold()
                .unsetItalic()
                .unsetUnderline()
                .unsetStrike()
                .unsetCode()
                .unsetHighlight()
                .unsetMark('textStyle')
                .run();
        }
    });

    // Group 7: Colors
    const highlightColorPicker = createColorPicker({
        title: 'Highlight color',
        icon: '<i class="fa fa-paint-brush"></i>',
        resetText: 'Remove highlight color',
        onChange: (color) => editor.chain().focus().setHighlight({ color }).run(),
        onReset: () => editor.chain().focus().unsetHighlight().run()
    });

    const textColorPicker = createColorPicker({
        title: 'Text color',
        icon: '<i class="fa fa-font" style="color: #333;"></i>',
        resetText: 'Reset text color',
        onChange: (color) => editor.chain().focus().setColor(color).run(),
        onReset: () => editor.chain().focus().unsetMark('textStyle').run()
    });

    // Group 8: Media
    const imageBtn = createButton({
        icon: '<i class="fa fa-image"></i>',
        title: 'Insert image',
        action: () => {
            const url = window.prompt('Enter image URL:');
            if (url) {
                editor.chain().focus().setImage({ src: url }).run();
            }
        }
    });

    const tableBtn = createButton({
        icon: '<i class="fa fa-table"></i>',
        title: 'Insert Table',
        action: () => {
            editor.chain().focus().insertTable({ rows: 3, cols: 3, withHeaderRow: true }).run();
        }
    });

    // Group 9: Alignment
    const alignLeftBtn = createButton({
        icon: '<i class="fa fa-align-left"></i>',
        title: 'Align Left',
        action: () => editor.chain().focus().setTextAlign('left').run(),
        isActive: () => editor.isActive({ textAlign: 'left' })
    });

    const alignCenterBtn = createButton({
        icon: '<i class="fa fa-align-center"></i>',
        title: 'Align Center',
        action: () => editor.chain().focus().setTextAlign('center').run(),
        isActive: () => editor.isActive({ textAlign: 'center' })
    });

    const alignRightBtn = createButton({
        icon: '<i class="fa fa-align-right"></i>',
        title: 'Align Right',
        action: () => editor.chain().focus().setTextAlign('right').run(),
        isActive: () => editor.isActive({ textAlign: 'right' })
    });

    const alignJustifyBtn = createButton({
        icon: '<i class="fa fa-align-justify"></i>',
        title: 'Justify',
        action: () => editor.chain().focus().setTextAlign('justify').run(),
        isActive: () => editor.isActive({ textAlign: 'justify' })
    });

    // Assemble toolbar with groups and separators
    toolbar.appendChild(createGroup([undoBtn, redoBtn]));
    toolbar.appendChild(createSeparator());
    toolbar.appendChild(createGroup([fontFamilySelect]));
    toolbar.appendChild(createSeparator());
    toolbar.appendChild(createGroup([fontSizeSelect]));
    toolbar.appendChild(createSeparator());
    toolbar.appendChild(createGroup([headingSelect]));
    toolbar.appendChild(createSeparator());
    toolbar.appendChild(createGroup([listSelect]));
    toolbar.appendChild(createSeparator());
    toolbar.appendChild(createGroup([blockquoteBtn, boldBtn, italicBtn, underlineBtn, strikeBtn, clearFormatBtn]));
    toolbar.appendChild(createSeparator());
    toolbar.appendChild(createGroup([highlightColorPicker, textColorPicker]));
    toolbar.appendChild(createSeparator());
    toolbar.appendChild(createGroup([linkBtn, imageBtn, tableBtn]));
    toolbar.appendChild(createSeparator());
    toolbar.appendChild(createGroup([alignLeftBtn, alignCenterBtn, alignRightBtn, alignJustifyBtn]));

    // Initialize hidden inputs with content
    if (hiddenInput) {
        hiddenInput.value = JSON.stringify(editor.getJSON());
    }
    if (htmlHiddenInput) {
        htmlHiddenInput.value = editor.getHTML();
    }

    // Handle form submission with custom AJAX
    const form = document.getElementById('js-form-tiptap-editor');
    form.addEventListener('submit', function(event) {
        event.preventDefault();

        // Get form data
        const formData = new FormData(form);
        const isNewRecord = window.location.pathname.includes('/new');

        // Determine URL and method
        const url = form.action;
        const method = isNewRecord ? 'POST' : 'PATCH';

        // Add method override for PATCH requests
        if (!isNewRecord) {
            formData.append('_method', 'PATCH');
        }

        // Add CSRF token
        const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');

        $.ajax({
            url: url,
            method: 'POST', // Always use POST, Rails will handle _method override
            data: formData,
            processData: false,
            contentType: false,
            headers: {
                'X-CSRF-Token': csrfToken,
                'Accept': 'application/json'
            },
            success: function(response) {
                if (response.success) {
                    Flash.success(response.message);

                    // Handle redirect for new records
                    if (response.redirect_url) {
                        window.location.href = response.redirect_url;
                    }
                    // For existing records, just show success message (no redirect)
                }
            },
            error: function(xhr) {
                let errorMessage = 'An error occurred while saving.';

                if (xhr.responseJSON && xhr.responseJSON.errors) {
                    errorMessage = xhr.responseJSON.errors.join(', ');
                } else if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMessage = xhr.responseJSON.message;
                }

                Flash.error(errorMessage);
            }
        });
    });

</script>

