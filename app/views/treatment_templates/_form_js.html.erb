<script type="text/javascript">

  function arrayMove(arr, old_index, new_index) {
    if (new_index >= arr.length) {
        var k = new_index - arr.length + 1;
        while (k--) {
            arr.push(undefined);
        }
    }
    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
  };

  $(function() {
    var initalData = <%= treatment_template.to_json(only: [:id, :name, :template_sections]).html_safe %>;
    var initialSections = initalData.template_sections;
    // Intitial `answers` for Text and Paragraph question to make it reactive
    // incase user change to Checkboxes or Radiobuttons
    for (var i = 0; i < initialSections.length; i++) {
      var section = initialSections[i];
      for (var j = 0; j < section.questions.length; j++) {
        var question = section.questions[j];
        if (question.type === 'Text' || question.type === 'Paragraph' || question.type === 'Integer') {
          question.answers = [];

          if (typeof question.answer === 'undefined') {
            question.answer = {
              content: null
            };
          }
        } else if (question.type === 'Multiselect') {
          if (!question.answers) {
            question.answers = [];
          }
        }
      }
    }

    new Vue({
      el: '#form-template-wrap',
      data: function() {
        return {
          busy: false,
          template: {
            id: initalData.id,
            name: initalData.name,
            template_sections: initialSections
          }
        };
      },
      mounted: function() {
        $('#input-user-ids').selectize({
          plugins: ['remove_button']
        });
      },
      methods: {
        addSection: function() {
          this.template.template_sections.push({
            name: null,
            questions: [
              {
                type: 'Text',
                answer: {
                  conent: null
                },
                answers: []
              }
            ]
          });
        },
        removeSection: function(section) {
          var needsConfirm = section.name || section.questions.length;

          var proceed = true;
          if (needsConfirm) {
            proceed = confirm('Are you sure want to remove this section?');
          }

          if (proceed) {
            this.template.template_sections.splice(this.template.template_sections.indexOf(section), 1);
          }
        },

        moveSectionUp: function(section) {
          const curIndex = this.template.template_sections.indexOf(section);
          if (curIndex <= 0) {
            return;
          }

          arrayMove(this.template.template_sections, curIndex, curIndex - 1)
        },

        moveSectionDown: function(section) {
          const curIndex = this.template.template_sections.indexOf(section);
          if (curIndex >= this.template.template_sections.length - 1) {
            return;
          }
          arrayMove(this.template.template_sections, curIndex, curIndex + 1)
        },
        moveSectionTop: function(section) {
          const curIndex = this.template.template_sections.indexOf(section);
          if (curIndex <= 0) {
            return;
          }

          arrayMove(this.template.template_sections, curIndex, 0)
        },

        moveSectionBottom: function(section) {
          const curIndex = this.template.template_sections.indexOf(section);
          if (curIndex >= this.template.template_sections.length - 1) {
            return;
          }
          arrayMove(this.template.template_sections, curIndex, this.template.template_sections.length - 1)
        },

        addQuestion: function(section) {
          section.questions.push({
            type: 'Text',
            answer: {
              conent: null
            },
            answers: []
          });
        },
        removeQuestion: function(section, question) {
          section.questions.splice(section.questions.indexOf(question), 1);
        },

        moveQuestionUp: function(section, question) {
          const curIndex = section.questions.indexOf(question);
          if (curIndex <= 0) {
            return;
          }

          arrayMove(section.questions, curIndex, curIndex - 1)
        },

        moveQuestionDown: function(section, question) {
          const curIndex = section.questions.indexOf(question);
          if (curIndex >= section.questions.length - 1) {
            return;
          }
          arrayMove(section.questions, curIndex, curIndex + 1)
        },
        moveQuestionTop: function(section, question) {
          const curIndex = section.questions.indexOf(question);
          if (curIndex <= 0) {
            return;
          }

          arrayMove(section.questions, curIndex, 0)
        },

        moveQuestionBottom: function(section, question) {
          const curIndex = section.questions.indexOf(question);
          if (curIndex >= section.questions.length - 1) {
            return;
          }
          arrayMove(section.questions, curIndex, section.questions.length - 1)
        },

        addAnswer: function(question) {
          question.answers.push({
            content: null
          });
        },
        removeAnswer: function(question, answer) {
          question.answers.splice(question.answers.indexOf(answer), 1);
        },
        onQuestionTypeChanged: function(question) {
          switch(question.type) {
            case 'Text':
            case 'Paragraph':
              question.answers = [];
              question.answer = {
                content: null
              };
              break;
            case 'Checkboxes':
              question.answers = [
                {
                  content: null
                }
              ];
              question.answer = null;
            break;
            case 'Radiobuttons':
              question.answers = [
                {
                  content: null
                }
              ];
              question.answer = null;
            break;
            case 'Integer':
              question.answers = [];
              question.answer = null;
            break;
            case 'Multiselect':
              question.answers = [];
              question.answer = null;
            break;
          }
        },
        onAddSelection: function(selection, question) {
          question.answers.push({
            content: selection
          });
        },
        buildFormData: function() {
          var data = {
            treatment_template: this.template
          };
          data.treatment_template.user_ids = $('#input-user-ids')[0].selectize.getValue();
          return data;
        },
        onSubmit: function() {
          var self = this;
          $.ajax({
            method: $(self.$refs.form).attr('method'),
            url: $(self.$refs.form).attr('action'),
            data: JSON.stringify(self.buildFormData()),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function() {
              self.busy = true;
            },
            success: function(res) {
              window.location.href = '/app/treatment_templates/' + res.treatment_template.id + '/edit';
            },
            complete: function() {
              self.busy = false;
            },
            error: function(xhr) {
              if (xhr.status === 422 && xhr.responseJSON && xhr.responseJSON.errors) {
                Flash.error('Validation errors: <br>' + xhr.responseJSON.errors.join('<br>'));
              } else {
                Flash.error('An error has occurred. Sorry for the inconvenience.');
              }
            }
          });
        }
      }
    });
  });
</script>
