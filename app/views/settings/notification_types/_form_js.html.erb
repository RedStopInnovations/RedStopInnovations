<script src="https://cdn.ckeditor.com/4.20.1/standard/ckeditor.js"></script>
<script type="text/javascript">
  $(function() {
    var $inputEmailBodyTemplate = $('#js-input-email-body-template');
    var $inputSMSContentTemplate = $('#js-input-sms-content-template');
    var ckeditor;
    /* Insert variable at current(or last) caret position */
    function insertVariableToEmailBody(value) {
      var textToInsert = "{{" + value + "}}";
      ckeditor.insertText(textToInsert);
    }

    var insertVariableToSMSContent = function(value) {
      var input = $inputSMSContentTemplate.get(0);
      var textToInsert = "{{" + value + "}}";
      //IE support
      if (document.selection) {
        input.focus();
        sel = document.selection.createRange();
        sel.text = textToInsert;
      }
      //MOZILLA and others
      else if (input.selectionStart || input.selectionStart == '0') {
        var startPos = input.selectionStart;
        var endPos = input.selectionEnd;
        input.value = input.value.substring(0, startPos)
            + textToInsert
            + input.value.substring(endPos, input.value.length);
      } else {
        input.value += textToInsert;
      }
    }

    /* Remove link protocol so users can enter full url */
    CKEDITOR.on('dialogDefinition', function(ev) {
      var dialogName = ev.data.name;
      var dialogDefinition = ev.data.definition;

      if (dialogName === 'link') {
        var infoTab = dialogDefinition.getContents('info');
        infoTab.remove('protocol');

        var url = infoTab.get('url');
        url.onKeyUp = function(){};
        url.setup = function(data) {
          this.allowOnChange = false;
          if (data.url) {
            var value = '';
            if (data.url.protocol) {
              value += data.url.protocol;
            }
            if (data.url.url) {
              value += data.url.url;
            }
            this.setValue(value);
          }
          this.allowOnChange = true;
        };
        url.commit = function(data) {
          data.url = { protocol: '', url: this.getValue() };
        };
      }
    });

    ckeditor = CKEDITOR.replace($inputEmailBodyTemplate.get(0), {
      enterMode: CKEDITOR.ENTER_BR,
      on: {
        instanceReady: function(env) {
          this.dataProcessor.writer.indentationChars = '';
          this.dataProcessor.writer.lineBreakChars = '';
        }
      }
    });

    /* Bind selectize to variables dropdowns */
    $('#js-select-email-body-variables').selectize({
      placeholder: $('#js-select-email-body-variables').attr('placeholder'),
      score: function (search) {
          // Workaround to keep options order as provided
          var score = this.getScoreFunction(search);
          return function (item) {
            return score(item) ? 1 : 0;
          };
      },
      onChange: function(val) {
        if (val && val.length > 0) {
          insertVariableToEmailBody(val);
        }
        this.clear();
      }
    });

    /* Bind selectize to variables dropdowns */
    $('#js-select-sms-content-variables').selectize({
      placeholder: $('#js-select-sms-content-variables').attr('placeholder'),
        score: function (search) {
          // Workaround to keep options order as provided
          var score = this.getScoreFunction(search);
          return function (item) {
            return score(item) ? 1 : 0;
          };
        },
      onChange: function(val) {
        if (val && val.length > 0) {
          insertVariableToSMSContent(val);
        }
        this.clear();
      }
    });

  });
</script>
