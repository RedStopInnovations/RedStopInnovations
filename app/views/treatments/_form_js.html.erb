<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.textcomplete/1.8.5/jquery.textcomplete.min.js" integrity="sha512-7DIA0YtDMlg4BW1e0pXjd96R5zJwK8fJullbvGWbuvkCYgEMkME0UFfeZIGfQGYjSwCSeFRG5MIB5lhhEvKheg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script type="application/json" id="js-treatment-note-shortcuts"><%= current_business.treatment_shortcuts.order(content: :asc).pluck(:content).to_json.html_safe %></script>
<script type="text/javascript">
  $(function() {
    /**
     * Handle template change to update form
     */
    var $treatmentContentWrap = $('#treatment-note-content-wrap');
    var $inputTreatmentTemplateId = $('#input-treatment-template-id');
    var $btnCopyTreatmentNote = $('.btn-copy-treatment-note');
    var lastTreatmentNote = null;

    var updateContentsFieldsFromTemplate = function(id) {
      $.ajax({
        method: 'GET',
        url: '/app/treatment_templates/' + id + '/sections_form',
        dataType: 'html',
        beforeSend: function() {
          $treatmentContentWrap.loadingOn();
        },
        success: function(res) {
          $treatmentContentWrap.empty();
          $treatmentContentWrap.html(res);

          autocompleteText();
          initMultiselectQuestion();
        },
        error: function(xhr) {
          Flash.error(
            'An error has occurred while loading template. Sorry for the inconvenience.'
          );
        },
        complete: function() {
          $treatmentContentWrap.loadingOff();
        }
      });
    };

    var getLastTreatmentNote = function(id) {
      $.ajax({
        method: 'GET',
        url: '<%= last_treatment_note_patient_treatments_path(@patient) %>?template_id=' + id,
        success: function(res) {
          lastTreatmentNote = res;
          if (res) {
            $btnCopyTreatmentNote.slideDown(0);
          } else {
            $btnCopyTreatmentNote.slideUp(0);
          }
        },
        error: function(xhr) {
          Flash.error(
            'An error has occurred while loading treatment. Please try again'
          );
          $btnCopyTreatmentNote.slideUp(0);
        }
      })
    }

    var initMultiselectQuestion = function() {
      $('.input-multiselect').each(function() {
        var $select = $(this);
        var $questionWrap = $select.closest('.question-wrap');
        $select.selectize({
          plugins: ['remove_button'],
          onItemRemove: function(item) {
            var $inputAnswerContent = $questionWrap.find('.input-answer-content[value="' + item +'"]');
            $inputAnswerContent.siblings('.cb-answer-selected').val('0');
          },
          onItemAdd: function(item) {
            var $inputAnswerContent = $questionWrap.find('.input-answer-content[value="' + item +'"]');
            $inputAnswerContent.siblings('.cb-answer-selected').val('1');
          }
        });
      });

    };

    var autocompleteText = function() {
      const treatmentNoteShortcuts = JSON.parse(document.getElementById('js-treatment-note-shortcuts').textContent);
      // Santize html is need as the textComplete plugin does not escape the string, potential XSS vulnerability.
      const sanitizedShortcuts = treatmentNoteShortcuts.map(function(text) {
        return Utils.simpleSanitizeHtmlString(text);
      });

      $('.form-treatment-note .hintable').textcomplete(
        [
          {
            match: /(^|\s|\w)@(\w*(?:\s*\w*))$/,
            search: function (term, callback) {
              callback($.map(sanitizedShortcuts, function (shortcut) {
                return shortcut.toLowerCase().indexOf(term.toLowerCase()) === 0 ? shortcut : null;
              }));
            },
            replace: function (shortcut) {
              return ' ' + shortcut + ' ';
            }
          }
        ],
        { maxCount: 5 }
      );
    }

    $inputTreatmentTemplateId.on('change', function() {
      var templateId = $(this).val();
      // IMPROVE: ask user to confirm the change if there is any answer filled.
      if (templateId.length) {
        updateContentsFieldsFromTemplate(templateId);
        getLastTreatmentNote(templateId);
      }
    });

    if ($("#new_treatment #input-treatment-template-id").val()) {
      updateContentsFieldsFromTemplate($("#new_treatment #input-treatment-template-id").val());
    }
    getLastTreatmentNote($inputTreatmentTemplateId.val());

    $btnCopyTreatmentNote.click(function(event) {
      if (lastTreatmentNote) {
        var index = 0;
        $.each(lastTreatmentNote.sections, function(indexSection, section) {
          $.each(section.questions, function(indexQuestion, question) {
            var $parentFormGroup = $('#treatment-note-content-wrap .form-group:eq(' + index + ')');
            switch(question.type) {
              case "Paragraph":
              case "Integer":
              case "Text":
                $parentFormGroup.find('.form-control').val(question.answer.content);
              break;
              case "Radiobuttons":
              case "Checkboxes":
                $.each(question.answers, function(indexAnswer, answer) {
                  if (answer.selected) {
                    $parentFormGroup.find('.answer-wrap:eq(' + indexAnswer + ') input[type="checkbox"]').prop("checked", 1);
                    $parentFormGroup.find('.answer-wrap:eq(' + indexAnswer + ') input[type="radio"]').click();
                  }
                });
              break;
              default:
              break;
            }
            index += 1;
          });
        });
        Flash.success('Last treatment note has been copied successfully');
      }
    });

    $('body').on('click', '.js-label-radio', function() {
      var $this = $(this);
      $this.closest('.answer-wrap')
        .siblings()
        .find('.input-answer-selected')
        .attr('disabled', true)
        .val(0);
      $this.closest('.answer-wrap')
        .find('.input-answer-selected')
        .removeAttr('disabled')
        .val(1);
    });

    /* Validate required questions */
    $('.form-treatment-note').submit(function(e) {
      var $form = $(this);
      var valid = true;
      var $inputQuestionAnswers = $form.find('.input-question-answer');
      for (var i = $inputQuestionAnswers.length - 1; i >= 0; i--) {
        var $input = $($inputQuestionAnswers[i]);
        if ($input.data('required') == '1') {
          switch ($input.prop('tagName')) {
            case "TEXTAREA":
            case "INPUT":
              if ($input.val().trim().length === 0) {
                valid = false;
              }
              break;
            case "SELECT":
              if ($input.val() == null) {
                valid = false;
              }
              break;
          }
        }
      }

      if (!valid) {
        e.preventDefault();
        Flash.error('Some required question is not completed!');
        return false;
      }
    });

    autocompleteText();
    initMultiselectQuestion();
  });

</script>
