<script type="text/javascript">
  (function() {
    var PAYMENT_SOURCE_FIELDS = [
      'cash', 'medicare', 'workcover',
      'dva', 'direct_deposit', 'cheque', 'other'
    ];

    new Vue({
      el: '#form-edit-payment',
      data: function() {
        return {
          totalOutstanding: 0,
          totalApplied: 0,
          totalRemaining: 0,
          paymentId: null,
          busy: false,
          payment: {
            payment_date: null,
            cash: null,
            medicare: null,
            workcover: null,
            dva: null,
            direct_deposit: null,
            cheque: null,
            other: null
          },
          patientOptions: [],
          isSearchingPatients: false,
          selectedPatient: null,
          business_id: window.session.user.business_id,
          payment_allocations: [],
          outstanding_invoices: []
        };
      },
      mounted: function() {
        this.init();
      },
      computed: {
        paymentTotal: function() {
          var total = 0;

          for (var i in PAYMENT_SOURCE_FIELDS) {
            if (this.payment[PAYMENT_SOURCE_FIELDS[i]]) {
              total += this.payment[PAYMENT_SOURCE_FIELDS[i]];
            }
          }
          return Math.round(total * 100) / 100;
        }
      },
      methods: {
        init: function() {
          var that = this;
          this.paymentId = $(this.$el).data('payment-id');
          // Load payment
          $.ajax({
            url: '/app/payments/' + that.paymentId + '.json',
            beforeSend: function() {
              that.busy = true;
            },
            success: function(res) {
              var payment = res.payment;
              var patient = payment.patient;
              that.selectedPatient = patient;

              for (var i = 0, l = payment.payment_allocations.length; i < l; i++) {
                var alloc = payment.payment_allocations[i];
                that.payment_allocations.push({
                  id: alloc.id,
                  invoice_id: alloc.invoice.id,
                  invoice: alloc.invoice,
                  amount: parseFloat(alloc.amount),
                  selected: true
                });
              }
              for (var i in PAYMENT_SOURCE_FIELDS) {
                var source = PAYMENT_SOURCE_FIELDS[i];
                if (payment[source] && payment[source] > 0) {
                  that.payment[source] = parseFloat(payment[source]);
                }
              }

              that.payment.payment_date = moment(payment.payment_date).format('YYYY-MM-DD');
              that.$nextTick(function() {
                $('#input-payment-date').flatpickr({
                  altFormat: 'd M Y',
                  dateFormat: 'Y-m-d',
                  altInput: true
                });
              });
              that.loadOtherOutstandingInvoices();
            },
            complete: function() {
              that.busy = false;
            }
          });
        },
        loadOtherOutstandingInvoices: function() {
          var that = this;
          var currentAllocatedInvoiceIds = [];
          for (var i = that.payment_allocations.length - 1; i >= 0; i--) {
            currentAllocatedInvoiceIds.push(that.payment_allocations[i].invoice_id);
          }

          $.ajax({
            url: '/app/patients/' + that.selectedPatient.id + '/outstanding_invoices.json?' + '_time=' + (new Date).getTime(),
            beforeSend: function() {
              that.busy = true;
            },
            success: function(res) {
              that.outstanding_invoices = res.invoices;

              for (var i = 0; i < res.invoices.length; i++) {
                var invoice = res.invoices[i];
                if (currentAllocatedInvoiceIds.indexOf(invoice.id) === -1) {
                  that.payment_allocations.push({
                    invoice: res.invoices[i],
                    selected: false
                  });
                }
              }

              that.refreshSummary();
            },
            complete: function() {
              that.busy = false;
            }
          });
        },
        buildFormData: function() {
          var data = {};
          if (this.selectedPatient) {
            data.patient_id = this.selectedPatient.id;
          }
          data.amount = this.payment.amount;
          data.payment_date = this.payment.payment_date;
          data.payment_allocations = [];

          for (var i in PAYMENT_SOURCE_FIELDS) {
            var source = PAYMENT_SOURCE_FIELDS[i];
            if (this.payment[source]) {
              data[source] = this.payment[source];
            }
          }

          for (var i = this.payment_allocations.length - 1; i >= 0; i--) {
            var alloc = this.payment_allocations[i];
            if (alloc.selected) {
              data.payment_allocations.push({
                invoice_id: alloc.invoice.id,
                amount: alloc.amount
              });
            }
          }
          return {
            payment: data
          };
        },
        submitForm: function() {
          if (this.busy) {
            return;
          }

          var that = this;
          $.ajax({
            method: 'PUT',
            url: '/app/payments/' + that.paymentId,
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify(that.buildFormData()),
            beforeSend: function() {
              that.busy = true;
            },
            success: function(res) {
              location.href = '/app/payments/' + that.paymentId;
            },
            error: function(xhr) {
              if (xhr.status === 422 && xhr.responseJSON) {
                var res = xhr.responseJSON;
                if (res.errors) {
                  Flash.error('Form errors: \n' + res.errors.join('\n'));
                }
              } else {
                Flash.error('An error has occurred. Sorry for the inconvenience.');
              }
            },
            complete: function() {
              that.busy = false;
            }
          });
        },
        refreshSummary: function() {
          var outstanding = 0;
          var remaining = 0;
          for (var i = this.outstanding_invoices.length - 1; i >= 0; i--) {
            var inv = this.outstanding_invoices[i];
            outstanding += parseFloat(this.outstanding_invoices[i].outstanding);
            for (var j = this.payment_allocations.length - 1; j >= 0; j--) {
              var alloc = this.payment_allocations[j];
              if (alloc.invoice.id == inv.id) {
                applied += alloc.amount;
                break;
              }
            }
          }

          var applied = 0;

          this.totalApplied = Math.round(applied * 100) / 100;
          this.totalOutstanding = Math.round(outstanding * 100) / 100;
          if (this.totalApplied > this.totalOutstanding) {
            remaining = 0;
          } else {
            remaining = this.totalOutstanding - this.totalApplied;
          }
          this.totalRemaining = Math.round(remaining * 100) / 100;
        },
        onPaidAmountChanged: function() {
          var paymentTotal = parseFloat(this.paymentTotal);
          restAmount = paymentTotal;

          for (var i = 0; i < this.payment_allocations.length; i++) {
            var allocation = this.payment_allocations[i];
            var allocAmnt = 0;
            var invOutstanding = parseFloat(allocation.invoice.outstanding);
            if (restAmount >= invOutstanding) {
              if (allocation.id) {
                allocAmnt = allocation.amount;
              } else {
                allocAmnt = invOutstanding;
              }
            } else {
              allocAmnt = restAmount;
            }

            allocation.amount = allocAmnt;
            if (allocAmnt > 0) {
              allocation.selected = true;
            } else {
              allocation.selected = false;
            }
            restAmount -= allocAmnt;
            if (restAmount <= 0) {
              restAmount = 0;
            }
          }

          this.refreshSummary();
        },
        onPatientChanged: function() {
          if (this.selectedPatient) {
            this.loadPatientOutstandingInvoices();
          } else {
            this.payment_allocations = [];
          }
        },
        onSearchPatientChanged: debounce(function(query) {
          var that = this;

          if (query.trim().length > 0) {
            that.isSearchingPatients = true;
            $.ajax({
              method: 'GET',
              url: '/api/patients/search?business_id=' + that.business_id + '&s=' + query,
              success: function(res) {
                that.patientOptions = res.patients;
              },
              complete: function() {
                that.isSearchingPatients = false;
              }
            });
          }
        }, 300),
      }
    });
  })();
</script>
